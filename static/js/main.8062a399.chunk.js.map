{"version":3,"sources":["Weather.js","App.js","serviceWorker.js","index.js"],"names":["Weather","props","react_default","a","createElement","className","city","Math","round","temperature","humidity","pressure","windSpeed","country","description","API","appiid","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isLoaded","items","error","valueCity","handleChange","bind","assertThisInitialized","handleSubmit","DownloadWeather","Translate","_this2","console","log","fetch","then","res","json","data","setState","main","temp","name","sys","weather","wind","speed","catch","weatherMain","event","target","value","preventDefault","today","Date","dd","getDate","mm","getMonth","yyyy","getFullYear","onSubmit","placeholder","type","onChange","src_Weather","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8062a399.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Weather = (props) => {\r\n  return (\r\n    <div className=\"containerWeather\">\r\n    <div><h1>{props.city}</h1></div>\r\n    <div>\r\n     <p>Temperatura: <strong>{Math.round(props.temperature)} &#176;C</strong></p>\r\n     <p>Wilgotność: <strong>{props.humidity}%</strong></p>\r\n     <p>Ciśnienie: <strong>{props.pressure} hpa</strong></p>\r\n     <p>Wiatr: <strong>{props.windSpeed}m/s</strong></p>\r\n     <p>Państwo: <strong>{props.country}</strong></p>\r\n     <p>Pogoda: <strong>{props.description}</strong></p>\r\n    </div>\r\n     \r\n    \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Weather;","import React, {\r\n  Component\r\n} from 'react';\r\nimport './App.css';\r\nimport Weather from './Weather.js';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst API = 'http://api.openweathermap.org/data/2.5/weather?q='\r\nconst appiid ='&appid=96cb99ba3c51c4da43eef0c4bc50a33e';\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isLoaded: true,\r\n      items:[],\r\n      temperature: null,\r\n      city: null,\r\n      country: null,\r\n      humidity: null,\r\n      description: null,\r\n      pressure:\"\",\r\n      windSpeed:\"\",\r\n      error: false,\r\n      valueCity: \"Warsaw\"\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.DownloadWeather = this.DownloadWeather.bind(this);\r\n    this.Translate = this.Translate.bind(this);\r\n  }\r\n\r\n  DownloadWeather(){\r\n    console.log(API+this.state.valueCity+appiid);\r\n    fetch(API+this.state.valueCity+appiid)\r\n    .then(res => res.json())\r\n    .then(\r\n      (data) => {\r\n        this.setState({\r\n          isLoaded: true,\r\n          temperature: (data.main.temp-274),\r\n          city: data.name,\r\n          country: data.sys.country,\r\n          humidity: data.main.humidity,\r\n          description: data.weather[0].main,\r\n          pressure: data.main.pressure,\r\n          windSpeed: data.wind.speed,\r\n          error:false\r\n        })})\r\n        .catch(error => this.setState({ error:true }));\r\n  }\r\n  componentDidMount() {\r\n    this.DownloadWeather();\r\n   \r\n    }\r\n    Translate(weatherMain){\r\n        switch (weatherMain) {\r\n          case \"Mist\":\r\n            return \"Zamglenie\";\r\n            case \"Snow\":\r\n            return \"Śnieg\"\r\n            case \"Rain\":\r\n            return \"Deszcz\"\r\n            case \"Clouds\":\r\n            return \"Pochmurno\"\r\n            case \"Clear\":\r\n            return \"Przejaśnia się\"\r\n          default:\r\n          return weatherMain;\r\n        }\r\n    }\r\n    handleChange(event) {\r\n      this.setState({valueCity: event.target.value});\r\n    }\r\n  \r\n    handleSubmit(event) {\r\n      this.DownloadWeather();\r\n      event.preventDefault();\r\n    }\r\n  render() {\r\n    const today = new Date();\r\n    const dd = today.getDate();\r\n    const mm = today.getMonth() + 1; \r\n    const yyyy = today.getFullYear();\r\n    if(this.state.error){\r\n      return(\r\n        <div className=\"app\" >\r\n        <h2 className=\"info\">Brak wybranej miejscowości w bazie</h2> \r\n        <form onSubmit={this.handleSubmit} className=\"input-group\">\r\n      <label>Miasto: </label>\r\n          <input placeholder=\"Podaj miasto\" type=\"text\" value={this.state.valueCity} onChange={this.handleChange} className=\"form-control\"/>\r\n        <div className=\"input-group-append\">\r\n        <button type=\"submit\"  className=\"btn btn-outline-secondary\">Wyszukaj</button>\r\n        </div>\r\n      </form>\r\n        </div>\r\n      )\r\n    }\r\n    else{\r\n    return ( \r\n    <div className=\"container\">\r\n\r\n    <div className=\"main\">\r\n    <div className=\"row\"> \r\n    <div className=\"col-xl-8 offset-xl-2\">\r\n    \r\n    <p className=\"date\">Dzisiaj mamy {dd}.{mm}.{yyyy}</p>\r\n     <Weather\r\n      temperature = {this.state.temperature}\r\n      city= {this.state.city}\r\n      humidity=  {this.state.humidity}\r\n      pressure ={this.state.pressure}\r\n      windSpeed = {this.state.windSpeed}\r\n      country = {this.state.country}\r\n      description= {this.Translate(this.state.description)}\r\n     />\r\n     </div>\r\n      <div className=\"col-xl-8 offset-xl-2\">\r\n      <form onSubmit={this.handleSubmit} className=\"input-group\">\r\n      <label>Miasto: </label>\r\n          <input placeholder=\"Podaj miasto\" type=\"text\" value={this.state.valueCity} onChange={this.handleChange} className=\"form-control\"/>\r\n        <div className=\"input-group-append\">\r\n        <button type=\"submit\"  className=\"btn btn-outline-secondary\">Wyszukaj</button>\r\n        </div>\r\n      </form>\r\n      </div>\r\n      </div>\r\n      </div>\r\n      </div>\r\n    );}\r\n  }\r\n}\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}